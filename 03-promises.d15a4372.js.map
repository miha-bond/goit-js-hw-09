{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,UAAWJ,SAASC,cAAc,UAGpC,SAASI,EAAcC,EAAGC,GACxB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACnBC,YAAW,KACxBH,EACFF,EAAQ,C,EAAEH,E,WAAGC,IAEbG,EAAO,C,EAAEJ,E,WAAGC,MAEbA,MAIPT,EAAKM,UAAUW,iBAAiB,UAAUC,IACxCA,EAAIC,iBACJ,IAAIC,EAAaC,OAAOrB,EAAKC,MAAMqB,OAC/BC,EAAYF,OAAOrB,EAAKI,KAAKkB,OAC7BE,EAAcH,OAAOrB,EAAKK,OAAOiB,OAErC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAaC,GAAK,EACpClB,EAAckB,EAAGL,GACdM,MAAK,EAAClB,EAAEA,EAACC,WAAEA,KACHX,EAAA6B,OAAOC,QAAQ,qBAAqBpB,QAAQC,SAEpDoB,OAAM,EAACrB,EAAEA,EAACC,WAAEA,KACJX,EAAA6B,OAAOG,QAAQ,oBAAoBtB,QAAQC,SAEtDW,GAAcG","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  btnSubmit: document.querySelector('.form'),\n};\n// ++++++++++++++++++++++++++++++++++++++++++\nfunction createPromise(i, delayValue) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const intervalId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ i, delayValue });\n      } else {\n        reject({ i, delayValue });\n      }\n    }, delayValue);\n  });\n}\n// ---------------------------------------------\nrefs.btnSubmit.addEventListener('submit', evt => {\n  evt.preventDefault();\n  let delayValue = Number(refs.delay.value);\n  let stepValue = Number(refs.step.value);\n  let amountValue = Number(refs.amount.value);\n\n  for (let i = 1; i < amountValue; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ i, delayValue }) => {\n        return Notify.success(`Fulfilled promise ${i} in ${delayValue}ms`);\n      })\n      .catch(({ i, delayValue }) => {\n        return Notify.failure(`Rejected promise ${i} in ${delayValue}ms`);\n      });\n    delayValue += stepValue;\n  }\n});\n\n// -------------------------------------------\n// ===========================================\n\n//todo Завдання 3 - генератор промісів\n//? Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n//\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n//\n//*      <form class=\"form\">\n//*        <label>\n//*         First delay (ms)\n//*         <input type=\"number\" name=\"delay\" required />\n//*        </label>\n//*        <label>\n//*         Delay step (ms)\n//*         <input type=\"number\" name=\"step\" required />\n//*        </label>\n//*        <label>\n//*         Amount\n//*         <input type=\"number\" name=\"amount\" required />\n//*       </label>\n//*       <button type=\"submit\">Create promises</button>\n//*      </form>\n//\n//? Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n//\n//*      function createPromise(position, delay) {\n//*        const shouldResolve = Math.random() > 0.3;\n//*        if (shouldResolve) {\n//*                Fulfill;\n//*        } else {\n//*               Reject;\n//*        }\n//*      }\n//\n//? Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n//\n//*      createPromise(2, 1500)\n//*      .then(({ position, delay }) => {\n//*         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//*      })\n//*      .catch(({ position, delay }) => {\n//*         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//*      });\n//\n//! Бібліотека повідомлень\n//! УВАГА\n//? Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n//\n//? Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix https://github.com/notiflix/Notiflix#readme.\n//\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","btnSubmit","$47d4ff9957288465$var$createPromise","i","delayValue","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delayValue1","Number","value","stepValue","amountValue","i1","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.d15a4372.js.map"}