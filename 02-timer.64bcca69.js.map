{"mappings":"oeAAAA,EAAA","sources":["src/js/02-timer.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// +++++++++++++++++++++++++++++++++++++++++++++++\n\n// ------------------------------------------------\n// ================================================\n//todo Завдання 2 - таймер зворотного відліку\n//? Виконуй це завдання у файлах 02-timer.html і 02-timer.js. Напиши скрипт таймера, який здійснює зворотний відлік до певної дати. Такий таймер може використовуватися у блогах та інтернет-магазинах, сторінках реєстрації подій, під час технічного обслуговування тощо. Подивися демо-відео роботи таймера.\n//\n//? Елементи інтефрейсу\n// HTML містить готову розмітку таймера, поля вибору кінцевої дати і кнопку, по кліку на яку, таймер повинен запускатися. Додай мінімальне оформлення елементів інтерфейсу.\n//\n//*      <input type=\"text\" id=\"datetime-picker\" /> */}\n//*      <button type=\"button\" data-start>Start</button> */}\n//\n//*      <div class=\"timer\"> */}\n//*       <div class=\"field\"> */}\n//*         <span class=\"value\" data-days>00</span> */}\n//*         <span class=\"label\">Days</span> */}\n//*       </div> */}\n//*       <div class=\"field\"> */}\n//*         <span class=\"value\" data-hours>00</span> */}\n//*         <span class=\"label\">Hours</span> */}\n//*       </div> */}\n//*       <div class=\"field\"> */}\n//*         <span class=\"value\" data-minutes>00</span> */}\n//*         <span class=\"label\">Minutes</span> */}\n//*       </div> */}\n//*       <div class=\"field\"> */}\n//*         <span class=\"value\" data-seconds>00</span> */}\n//*         <span class=\"label\">Seconds</span> */}\n//*       </div> */}\n//*      </div> */}\n//\n//! Бібліотека flatpickr\n//? Використовуй бібліотеку flatpickr https://flatpickr.js.org/ для того, щоб дозволити користувачеві кросбраузерно вибрати кінцеву дату і час в одному елементі інтерфейсу. Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, крім того, що описаний в документації.\n//\n//? Описаний в документації\n//? import flatpickr from \"flatpickr\";\n//? Додатковий імпорт стилів\n//? import \"flatpickr/dist/flatpickr.min.css\";\n//?\n//? Бібліотека очікує, що її ініціалізують на елементі input[type=\"text\"], тому ми додали до HTML документу поле input#datetime-picker.\n//\n//* <input type=\"text\" id=\"datetime-picker\" />\n//\n//? Другим аргументом функції flatpickr(selector, options) можна передати необов'язковий об'єкт параметрів. Ми підготували для тебе об'єкт, який потрібен для виконання завдання. Розберися, за що відповідає кожна властивість в документації «Options», і використовуй його у своєму коді.\n//\n//* const options = {\n//* enableTime: true,\n//* time_24hr: true,\n//* defaultDate: new Date(),\n//* minuteIncrement: 1,\n//* onClose(selectedDates) {\n//*   console.log(selectedDates[0]);\n//*  },\n//* };\n//\n//! Вибір дати\n//? Метод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr. Саме у ньому варто обробляти дату, обрану користувачем. Параметр selectedDates - це масив обраних дат, тому ми беремо перший елемент.\n//\n//? Якщо користувач вибрав дату в минулому, покажи window.alert() з текстом \"Please choose a date in the future\".\n//? Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\n//? Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому.\n//? Натисканням на кнопку «Start» починається відлік часу до обраної дати з моменту натискання.\n//! Відлік часу\n//? Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера, показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n//? Кількість днів може складатися з більше, ніж двох цифр.\n//? Таймер повинен зупинятися, коли дійшов до кінцевої дати, тобто 00:00:00:00.\n//! НЕ БУДЕМО УСКЛАДНЮВАТИ\n//? Якщо таймер запущений, для того щоб вибрати нову дату і перезапустити його - необхідно перезавантажити сторінку.\n//? Для підрахунку значень використовуй готову функцію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n//\n//* function convertMs(ms) {\n//*   Number of milliseconds per unit of time\n//*   const second = 1000;\n//*   const minute = second * 60;\n//*   const hour = minute * 60;\n//*   const day = hour * 24;\n//*\n//*   Remaining days\n//*    const days = Math.floor(ms / day);\n//*   Remaining hours\n//*    const hours = Math.floor((ms % day) / hour);\n//*   Remaining minutes\n//*    const minutes = Math.floor(((ms % day) % hour) / minute);\n//*   Remaining seconds\n//*    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n//*\n//*  return { days, hours, minutes, seconds };\n//* }\n//\n//* console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//* console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//* console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n//\n//! Форматування часу\n//? Функція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати. Зверни увагу, що вона не форматує результат. Тобто, якщо залишилося 4 хвилини або будь-якої іншої складової часу, то функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0, якщо в числі менше двох символів. Напиши функцію addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення.\n//\n//! Бібліотека повідомлень\n//! УВАГА\n//? Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n//\n//? Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку notiflix https://github.com/notiflix/Notiflix#readme.\n//\n"],"names":["parcelRequire"],"version":3,"file":"02-timer.64bcca69.js.map"}